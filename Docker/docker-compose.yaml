version: '3.8'

#x-mongo-secrets: &mongo-credentials
#  MONGO_USER: &mongo-user root
#  MONGO_PASS: &mongo-pass toor
#  MONGO_AUTH_DB: admin
#  MONGO_HOST: mongo
#  MONGO_PORT: 27017
#  MONGO_DB_NAME: bookdb

#x-common-settings: &common-settings
#  restart: on-failure

services:
  booking-orchestrator:
#    <<: *common-settings
    build:
      context: ./booking-orchestrator
      dockerfile: ./Dockerfile
    environment:
      #restart: on-failure
      KAFKA_ADDRESS: kafka:9092
      KAFKA_GROUP_ID: booking-orchestrator-group
      KAFKA_MAIN_TOPIC: main-topic
      KAFKA_USER_REQUEST_TOPIC: user-request-topic
      KAFKA_USER_RESPONSE_TOPIC: user-response-topic
      KAFKA_HOTEL_REQUEST_TOPIC: hotel-request-topic
      KAFKA_HOTEL_RESPONSE_TOPIC: hotel-response-topic
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8000:8080"
    volumes:
      - ../booking-orchestrator/:/code

  user-service:
    #    <<: *common-settings
    build:
      context: ./user-service
      dockerfile: ./Dockerfile
    environment:
      #restart: on-failure
      KAFKA_ADDRESS: kafka:9092
      KAFKA_GROUP_ID: user-service-group
      KAFKA_MAIN_TOPIC: main-topic
      KAFKA_USER_REQUEST_TOPIC: user-request-topic
      KAFKA_USER_RESPONSE_TOPIC: user-response-topic
      MONGODB_HOSTNAME: user-service-db
      MONGODB_PORT: "27017"
      MONGO_AUTH_DB: admin
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: toor
      #MONGODB_HOST: user-service-db
      #MONGODB_DB_NAME: users
    depends_on:
      - zookeeper
      - kafka
      - user-service-db
    ports:
      - "8081:8080"
    volumes:
      - ../user-service/:/code

  user-service-db:
     # <<: *common-settings
      image: mongo:latest
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: toor
      ports:
        - "27017:27017"
      volumes:
       - mongo-db-data-user-service:/data/db

#  mongo:
#    <<: *common-settings
#    image: mongo
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: *mongo-user
#      MONGO_INITDB_ROOT_PASSWORD: *mongo-pass
#    ports:
#      - 27017:27017
#    volumes:
#      - mongo-db-data:/data/db

  zookeeper:
    image: library/zookeeper:3.4.13
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: wurstmeister/kafka:2.11-2.0.0
    #build:
      #context: kafka
      #dockerfile: Dockerfile
    links:
      - zookeeper:zk
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: $CF_HOST_IP
      KAFKA_ZOOKEEPER_CONNECT: zk:2181
      KAFKA_MESSAGE_MAX_BYTES: 2000000
      #KAFKA_CREATE_TOPICS: "Topic1:1:1"
      #KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      #BROKER_ID_COMMAND: "hostname | cut -d'-' -f2"
      KAFKA_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Djava.rmi.server.hostname=127.0.0.1"
      JMX_PORT: "9999"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper


volumes:
  mongo-db-data-user-service: